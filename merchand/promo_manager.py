import json
from datetime import datetime, timedelta
from pathlib import Path
import calendar
import requests
from typing import Dict, List, Optional

class PromoManager:
    def __init__(self):
        self.promo_path = Path("PROMOTIONS/promo_templates.json")
        self.events_path = Path("PROMOTIONS/events.json")
        self.notifications_path = Path("PROMOTIONS/notifications.json")
        self.last_notification_path = Path("PROMOTIONS/last_notification.json")
        
    def _load_events(self) -> Dict:
        """Charge les √©v√©nements du calendrier."""
        if self.events_path.exists():
            with open(self.events_path, 'r') as f:
                return json.load(f)
        return {
            "events": [
                {
                    "name": "F√™te des M√®res",
                    "date": "2024-05-26",
                    "message": "üéÅ Offrez √† votre maman une chance de gagner !"
                },
                {
                    "name": "F√™te des P√®res",
                    "date": "2024-06-16",
                    "message": "üéÅ Faites plaisir √† votre papa !"
                },
                {
                    "name": "Saint-Valentin",
                    "date": "2024-02-14",
                    "message": "‚ù§Ô∏è Offrez l'amour et la chance √† votre moiti√© !"
                },
                {
                    "name": "No√´l",
                    "date": "2024-12-25",
                    "message": "üéÑ Le plus beau des cadeaux : la chance de gagner !"
                },
                {
                    "name": "Nouvel An",
                    "date": "2025-01-01",
                    "message": "‚ú® Commencez l'ann√©e avec de la chance !"
                },
                {
                    "name": "P√¢ques",
                    "date": "2024-03-31",
                    "message": "ü•ö Les ≈ìufs de P√¢ques cachent peut-√™tre le gros lot !"
                },
                {
                    "name": "F√™te Nationale",
                    "date": "2024-07-14",
                    "message": "üéÜ C√©l√©brez la France avec un tirage sp√©cial !"
                },
                {
                    "name": "Black Friday",
                    "date": "2024-11-29",
                    "message": "üõçÔ∏è Les meilleures offres de l'ann√©e !"
                }
            ]
        }
        
    def _load_notifications(self) -> Dict:
        """Charge l'historique des notifications."""
        if self.notifications_path.exists():
            with open(self.notifications_path, 'r') as f:
                return json.load(f)
        return {"notifications": []}
        
    def _save_notification(self, user_id: str, message: str):
        """Sauvegarde une notification envoy√©e."""
        notifications = self._load_notifications()
        notifications["notifications"].append({
            "user_id": user_id,
            "message": message,
            "timestamp": datetime.now().isoformat()
        })
        with open(self.notifications_path, 'w') as f:
            json.dump(notifications, f, indent=2)
            
    def _get_current_event(self) -> Optional[Dict]:
        """R√©cup√®re l'√©v√©nement en cours."""
        events = self._load_events()
        today = datetime.now().date()
        
        for event in events["events"]:
            event_date = datetime.strptime(event["date"], "%Y-%m-%d").date()
            if event_date == today:
                return event
        return None
        
    def _should_notify(self, user_id: str, days_left: int) -> bool:
        """D√©termine si une notification doit √™tre envoy√©e."""
        if not self.last_notification_path.exists():
            return True
            
        with open(self.last_notification_path, 'r') as f:
            last = json.load(f)
            
        if user_id not in last:
            return True
            
        last_time = datetime.fromisoformat(last[user_id])
        now = datetime.now()
        
        # Une notification par jour maximum
        if (now - last_time).days < 1:
            return False
            
        # Notification √† 30, 15, 7, 3, 2, 1 jours
        return days_left in [30, 15, 7, 3, 2, 1]
        
    def _update_last_notification(self, user_id: str):
        """Met √† jour la derni√®re notification."""
        if self.last_notification_path.exists():
            with open(self.last_notification_path, 'r') as f:
                last = json.load(f)
        else:
            last = {}
            
        last[user_id] = datetime.now().isoformat()
        
        with open(self.last_notification_path, 'w') as f:
            json.dump(last, f, indent=2)
            
    def get_promo_message(self, user_id: str, days_left: int) -> Optional[str]:
        """G√©n√®re un message de promotion personnalis√©."""
        if not self._should_notify(user_id, days_left):
            return None
            
        event = self._get_current_event()
        if event:
            message = f"{event['message']} Profitez de -15% avec le code SPECIAL !"
        else:
            if days_left == 1:
                message = "‚ö†Ô∏è Votre licence expire demain ! Renouvelez maintenant pour -20% !"
            elif days_left <= 3:
                message = "‚è∞ Plus que quelques jours ! Profitez de -15% sur votre renouvellement !"
            elif days_left <= 7:
                message = "üéÅ Une semaine pour renouveler avec -10% !"
            else:
                message = "üí´ Renouvelez votre licence et b√©n√©ficiez de -5% !"
                
        self._save_notification(user_id, message)
        self._update_last_notification(user_id)
        
        return message
        
    def get_newsletter_content(self, version: str) -> str:
        """G√©n√®re le contenu de la newsletter."""
        return f"""
        üöÄ Mise √† jour {version}
        
        D√©couvrez les nouvelles fonctionnalit√©s :
        - Am√©lioration des pr√©dictions
        - Interface plus intuitive
        - Nouvelles statistiques
        
        Restez connect√© pour plus d'actualit√©s !
        """
        
    def send_newsletter(self, user_email: str, content: str):
        """Envoie la newsletter √† un utilisateur."""
        # TODO: Impl√©menter l'envoi de newsletter
        pass 
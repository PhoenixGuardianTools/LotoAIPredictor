import datetime
import numpy as np
from core.statistics import (
    detect_long_term_cycles,
    get_frequent_numbers,
    detect_anomalies,
    evaluate_periodic_trends,
    markov_trend_prediction
)

def generate_predictions(history_df):
    """G√©n√®re des pr√©visions bas√©es sur les tendances et probabilit√©s des prochains tirages."""
    now = datetime.datetime.now()
    
    # Analyse statistique avanc√©e
    frequent_nums, _ = get_frequent_numbers(history_df)
    anomalies = detect_anomalies(history_df)
    periodic_trends = evaluate_periodic_trends(history_df)
    long_term_cycles = detect_long_term_cycles(history_df)
    markov_predictions = markov_trend_prediction(history_df)

    # S√©lection des num√©ros optimis√©s
    top_numbers = sorted(frequent_nums[:6])  # Les num√©ros les plus pr√©sents
    cycle_numbers = sorted(long_term_cycles.keys()[:6])  # Num√©ros influenc√©s par les cycles longs
    anomaly_numbers = sorted(anomalies.keys()[:6])  # Num√©ros ayant des irr√©gularit√©s d√©tect√©es
    markov_numbers = sorted(markov_predictions.keys()[:6])  # Pr√©dictions de tendances

    # G√©n√©ration des grilles
    predictions = {
        "EuroDreams": sorted(set(top_numbers + cycle_numbers)),
        "Euromillions": sorted(set(cycle_numbers + markov_numbers)),
        "Loto": sorted(set(anomaly_numbers + periodic_trends.keys()[:6]))
    }

    return predictions

# Ex√©cution des pr√©visions
if __name__ == "__main__":
    predictions = generate_predictions(history_df)
    print("\nüìä **Pr√©visions pour les prochains tirages** üìä")
    for game, numbers in predictions.items():
        print(f"{game} : {numbers}")
